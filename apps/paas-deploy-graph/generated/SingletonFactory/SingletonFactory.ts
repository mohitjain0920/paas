// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deployed extends ethereum.Event {
  get params(): Deployed__Params {
    return new Deployed__Params(this);
  }
}

export class Deployed__Params {
  _event: Deployed;

  constructor(event: Deployed) {
    this._event = event;
  }

  get createdContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SingletonFactory extends ethereum.SmartContract {
  static bind(address: Address): SingletonFactory {
    return new SingletonFactory("SingletonFactory", address);
  }

  computeAddress(salt: Bytes, bytecode: Bytes): Address {
    let result = super.call(
      "computeAddress",
      "computeAddress(bytes32,bytes):(address)",
      [ethereum.Value.fromFixedBytes(salt), ethereum.Value.fromBytes(bytecode)]
    );

    return result[0].toAddress();
  }

  try_computeAddress(
    salt: Bytes,
    bytecode: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "computeAddress",
      "computeAddress(bytes32,bytes):(address)",
      [ethereum.Value.fromFixedBytes(salt), ethereum.Value.fromBytes(bytecode)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deploy(bytecode: Bytes, salt: Bytes): Address {
    let result = super.call("deploy", "deploy(bytes,bytes32):(address)", [
      ethereum.Value.fromBytes(bytecode),
      ethereum.Value.fromFixedBytes(salt)
    ]);

    return result[0].toAddress();
  }

  try_deploy(bytecode: Bytes, salt: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("deploy", "deploy(bytes,bytes32):(address)", [
      ethereum.Value.fromBytes(bytecode),
      ethereum.Value.fromFixedBytes(salt)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DeployCall extends ethereum.Call {
  get inputs(): DeployCall__Inputs {
    return new DeployCall__Inputs(this);
  }

  get outputs(): DeployCall__Outputs {
    return new DeployCall__Outputs(this);
  }
}

export class DeployCall__Inputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get bytecode(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get salt(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class DeployCall__Outputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
